
object tacticalMapObject_Volcano : mapObject_Volcano {
	void			destroy();

	void			InitObjectives();
	void			InitSplitObjectives( float index );
	void			CompleteObjective( float index, entity p );

	void			StartFirstObjective();
	void			StartTransformerObjective();
	void			StartCoreObjective();

	void			OnHackFinal();
	void			OnTransformerDestroyedFinal();

	vector			GetGDFBasePosition() { return '390 9000 6130'; }
}

tacticalMapObject_Volcano Volcano_TacticalMapScript() {
	return new tacticalMapObject_Volcano;
}

void tacticalMapObject_Volcano::destroy() {
	if ( leftVentTask != $null ) {
		leftVentTask.free();
		leftVentTask = $null;
	}
	if ( rightVentTask != $null ) {
		rightVentTask.free();
		rightVentTask = $null;
	}
	if ( leftVentTaskDefend != $null ) {
		leftVentTaskDefend.free();
		leftVentTaskDefend = $null;
	}
	if ( rightVentTaskDefend != $null ) {
		rightVentTaskDefend.free();
		rightVentTaskDefend = $null;
	}
}

void tacticalMapObject_Volcano::InitSplitObjectives( float index ) {
	if ( gameRules.IsTactical() && index > -1 && index == OBJECTIVE_VOLCANO_DESTROY_CORE ) {
		seawallBreach.remove();
		OnSeawallBreachDestroyed();
		eastBunkerBreach.remove();
		OnEastBunkerBreachDestroyed();
		forwardBunkerDoor.remove();
		OnForwardBunkerDoorDestroyed();
		OnHack();
		OnTransformerDestroyed();
	} else if ( gameRules.IsTactical() && index > -1 && index == OBJECTIVE_VOLCANO_DESTROY_TRANSFORMER ) {
		seawallBreach.remove();
		OnSeawallBreachDestroyed();
		eastBunkerBreach.remove();
		OnEastBunkerBreachDestroyed();
		forwardBunkerDoor.remove();
		OnForwardBunkerDoorDestroyed();
		OnHack();
	}
}

void tacticalMapObject_Volcano::InitObjectives() {
	gameRules.setWinningTeam( gdfTeam );
	gdfTeam.SetRespawnWait( 20 );
	stroggTeam.SetRespawnWait( 20 );
	gdfTeam.InitRespawnTimeChange();
	stroggTeam.InitRespawnTimeChange();
	CreateRespawnTimeThread( stroggTeam );

	flyerDroneTaskDef	       = GetPlayerTask( worldspawn.getKey( "task_flyer_drone" ) );
	flyerDroneDefendTaskDef	 = GetPlayerTask( worldspawn.getKey( "task_flyer_drone_defend" ) );

	//
	// Territories
	//
	gdfBaseTerritory		= worldspawn.getEntityKey( "script_gdf_base_territory" );
	beachTerritory		  = worldspawn.getEntityKey( "script_beach_territory" );
	facilityTerritory	       = worldspawn.getEntityKey( "script_facility_territory" );
	stroggBaseTerritory	     = worldspawn.getEntityKey( "script_strogg_base_territory" );

	gdfBaseTerritory.setActive( false );
	facilityTerritory.setActive( false );
	beachTerritory.setActive( true );
	stroggBaseTerritory.setActive( true );

	gdfBaseTerritory.setGameTeam( gdfTeam );
	facilityTerritory.setGameTeam( gdfTeam );
	beachTerritory.setGameTeam( gdfTeam );
	stroggBaseTerritory.setGameTeam( stroggTeam );

	//
	// Spawns
	//
	gdfBunkerSpawn		  = worldspawn.getEntityKey( "script_gdf_bunker_spawn" );
	gdfBaseSpawn		    = worldspawn.getEntityKey( "script_gdf_base_spawn" );
	gdfFacilitySpawn		= worldspawn.getEntityKey( "script_gdf_facility_spawn" );
	stroggBaseSpawn		 = worldspawn.getEntityKey( "script_strogg_base_spawn" );
	stroggBunkerSpawn	       = worldspawn.getEntityKey( "script_strogg_bunker_spawn" );
	stroggBeachSpawn		= worldspawn.getEntityKey( "script_strogg_beach_spawn" );
	gdfOutsideSpawn		 = worldspawn.getEntityKey( "script_gdf_outside_spawn" );

	gdfOutsideSpawn.vSetActive( true );
	gdfOutsideSpawn.setGameTeam( gdfTeam );

	gdfBunkerSpawn.setGameTeam( gdfTeam );
	gdfBaseSpawn.setGameTeam( gdfTeam );
	gdfFacilitySpawn.setGameTeam( $null_entity );

	stroggBaseSpawn.setGameTeam( stroggTeam );
	stroggBunkerSpawn.setGameTeam( $null_entity );

	stroggBeachSpawn.setGameTeam( $null_entity );
	stroggBeachSpawn.vSetActive( true );

	//
	// Objectives
	//
	objective1			      = worldspawn.getEntityKey( "script_obj1_marker" );
	objective2			      = worldspawn.getEntityKey( "script_obj2_marker" );
	objective3a			     = worldspawn.getEntityKey( "script_obj3a_marker" );
	objective3b			     = worldspawn.getEntityKey( "script_obj3b_marker" );
	objective3c			     = worldspawn.getEntityKey( "script_obj3c_marker" );
	objective3d			     = worldspawn.getEntityKey( "script_obj3d_marker" );
	objective3e			     = worldspawn.getEntityKey( "script_obj3e_marker" );


	objective1Arrow1		= worldspawn.getEntityKey( "script_obj1_arrow1" );
	objective1Arrow2		= worldspawn.getEntityKey( "script_obj1_arrow2" );
	objective2Arrow1		= worldspawn.getEntityKey( "script_obj2_arrow1" );
	objective2Arrow2		= worldspawn.getEntityKey( "script_obj2_arrow2" );
	objective3Arrow1		= worldspawn.getEntityKey( "script_obj3_arrow1" );

	objective1.vStartObjective();
	objective1Arrow1.vStartObjective();
	objective1Arrow2.vStartObjective();

	objective2.vStartObjective();
	objective3a.vStartObjective();

	core1					= worldspawn.getEntityKey( "script_core1" );
	core2					= worldspawn.getEntityKey( "script_core2" );
	core3					= worldspawn.getEntityKey( "script_core3" );
	core4					= worldspawn.getEntityKey( "script_core4" );
	core5					= worldspawn.getEntityKey( "script_core5" );

	transformer				= worldspawn.getEntityKey( "script_transformer" );
	securityControls		= worldspawn.getEntityKey( "script_security_controls" );

	transformer_door_a		=       worldspawn.getEntityKey( "script_transformer_door_a" );
	transformer_door_b		=       worldspawn.getEntityKey( "script_transformer_door_b" );
	transformer_door_c		=       worldspawn.getEntityKey( "script_transformer_door_c" );
	transformer_door_d		=       worldspawn.getEntityKey( "script_transformer_door_d" );

	seawallBreach			= worldspawn.getEntityKey( "script_seawall_breach" );
	seawallBreachDetail		= worldspawn.getEntityKey( "script_seawall_breach_detail" );
	seawallBreachBroken		= worldspawn.getEntityKey( "script_seawall_breach_broken" );

	eastBunkerBreach		= worldspawn.getEntityKey( "script_east_bunker" );
	eastBunkerBreachBroken	= worldspawn.getEntityKey( "script_east_bunker_broken" );

	forwardBunkerDoor		= worldspawn.getEntityKey( "script_forward_bunker_door" );
	forwardBunkerDoorBroken	= worldspawn.getEntityKey( "script_forward_bunker_door_broken" );

	gun1Construction		= worldspawn.getEntityKey( "script_gun_1" );
	gun2Construction		= worldspawn.getEntityKey( "script_gun_2" );
	gun3Construction		= worldspawn.getEntityKey( "script_gun_3" );
	gun4Construction		= worldspawn.getEntityKey( "script_gun_4" );
	gun5Construction		= worldspawn.getEntityKey( "script_gun_5" );

	noplant_seawall_breach		= worldspawn.getEntityKey( "script_noplant_seawall_breach" );
	noplant_east_bunker_breach	= worldspawn.getEntityKey( "script_noplant_east_bunker_breach" );
	noplant_bunker_door			= worldspawn.getEntityKey( "script_noplant_bunker_door" );
	noplant_transformer			= worldspawn.getEntityKey( "script_noplant_transformer" );

	core1.setTakesDamage( 0 );
	core2.setTakesDamage( 0 );
	core3.setTakesDamage( 0 );
	core4.setTakesDamage( 0 );
	core5.setTakesDamage( 0 );

	seawallBreachBroken.hide();
	eastBunkerBreachBroken.hide();
	forwardBunkerDoorBroken.hide();

	core1.hide();
	core1.forceDisableClip();

	core2.hide();
	core2.forceDisableClip();

	core3.hide();
	core3.forceDisableClip();

	core4.hide();
	core4.forceDisableClip();



	//
	// Misc
	//
	//securityDoors				= worldspawn.getEntityKey( "script_security_doors" );
	entranceWhole				= worldspawn.getEntityKey( "script_entrance_building_whole" );
	entranceWholeDetail			= worldspawn.getEntityKey( "script_entrance_building_whole_detail" );
	entranceDestroyed			= worldspawn.getEntityKey( "script_entrance_building_destroyed" );
	fakeDoor					= worldspawn.getEntityKey( "script_fake_door" );

	pipes						= worldspawn.getEntityKey( "script_cascade_pipes" );
	pipesAll					= worldspawn.getEntityKey( "script_cascade_pipes_all" );
	pipesDamagedAll				= worldspawn.getEntityKey( "script_cascade_damaged_pipes_all" );
	damagedPipes1				= worldspawn.getEntityKey( "script_cascade_damaged_pipes_1" );
	damagedPipes2				= worldspawn.getEntityKey( "script_cascade_damaged_pipes_2" );
	damagedPipes3				= worldspawn.getEntityKey( "script_cascade_damaged_pipes_3" );
	damagedPipes4				= worldspawn.getEntityKey( "script_cascade_damaged_pipes_4" );
	undamagedPipes1				= worldspawn.getEntityKey( "script_cascade_undamaged_pipes_1" );
	undamagedPipes2				= worldspawn.getEntityKey( "script_cascade_undamaged_pipes_2" );
	undamagedPipes3				= worldspawn.getEntityKey( "script_cascade_undamaged_pipes_3" );
	undamagedPipes4				= worldspawn.getEntityKey( "script_cascade_undamaged_pipes_4" );

	cascadeFX1					= worldspawn.getEntityKey( "script_fx_cascade1" );
	cascadeFX2					= worldspawn.getEntityKey( "script_fx_cascade2" );
	cascadeFX3					= worldspawn.getEntityKey( "script_fx_cascade3" );
	cascadeFX4					= worldspawn.getEntityKey( "script_fx_cascade4" );
	cascadeFX5					= worldspawn.getEntityKey( "script_fx_cascade5" );
	cascadeFX6					= worldspawn.getEntityKey( "script_fx_cascade6" );

	transformerInteriorSteam1	= worldspawn.getEntityKey( "script_transformer_interior_steam1" );
	transformerInteriorSteam2	= worldspawn.getEntityKey( "script_transformer_interior_steam2" );
	transformerInteriorSteam3	= worldspawn.getEntityKey( "script_transformer_interior_steam3" );
	transformerInteriorSteam4	= worldspawn.getEntityKey( "script_transformer_interior_steam4" );
	transformerInteriorSteam5	= worldspawn.getEntityKey( "script_transformer_interior_steam5" );
	transformerInteriorSteam6	= worldspawn.getEntityKey( "script_transformer_interior_steam6" );
	transformerInteriorSteam7	= worldspawn.getEntityKey( "script_transformer_interior_steam7" );
	transformerInteriorSteam8	= worldspawn.getEntityKey( "script_transformer_interior_steam8" );

	transformerGlassSmash1		= worldspawn.getEntityKey( "script_transformer_glass_smash_1" );
	transformerGlassSmash2		= worldspawn.getEntityKey( "script_transformer_glass_smash_2" );
	transformerGlassSmash3		= worldspawn.getEntityKey( "script_transformer_glass_smash_3" );
	transformerGlassSmash4		= worldspawn.getEntityKey( "script_transformer_glass_smash_4" );
	transformerGlassSmash5		= worldspawn.getEntityKey( "script_transformer_glass_smash_5" );
	transformerGlassSmash6		= worldspawn.getEntityKey( "script_transformer_glass_smash_6" );
	transformerGlassSmash7		= worldspawn.getEntityKey( "script_transformer_glass_smash_7" );

	transformerInteriorEffects	= worldspawn.getEntityKey( "script_transformer_interior_effects" );

	transformerExteriorEffects	= worldspawn.getEntityKey( "script_transformer_exterior_effects" );
	transformerWallEffects		= worldspawn.getEntityKey( "script_transformer_wall_effects" );
	transformerWallEffects2		= worldspawn.getEntityKey( "script_transformer_wall_effects2" );

	transformerfacilitySmoke	= worldspawn.getEntityKey( "script_transformer_facility_smoke" );
	transformerfacilityRubble	= worldspawn.getEntityKey( "script_transformer_facility_rubble" );

	transformerfacilityBigPipes01a	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes01a" );
	transformerfacilityBigPipes01b	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes01b" );
	transformerfacilityBigPipes01c	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes01c" );
	transformerfacilityBigPipes02a	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes02a" );
	transformerfacilityBigPipes02b	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes02b" );
	transformerfacilityBigPipes02c	= worldspawn.getEntityKey( "script_transformer_facility_bigpipes02c" );

	coreExplosion					= worldspawn.getEntityKey( "script_core_explosion" );

	coreIdleEffect1					= worldspawn.getEntityKey( "script_core_effects_idle_1" );
	coreIdleEffect2					= worldspawn.getEntityKey( "script_core_effects_idle_2" );
	coreIdleEffect3					= worldspawn.getEntityKey( "script_core_effects_idle_3" );
	coreIdleEffect4					= worldspawn.getEntityKey( "script_core_effects_idle_4" );
	coreIdleEffect5					= worldspawn.getEntityKey( "script_core_effects_idle_5" );

	transformerGlass1				= worldspawn.getEntityKey( "script_transformer_glass_1" );
	transformerGlass2				= worldspawn.getEntityKey( "script_transformer_glass_2" );
	transformerGlass3				= worldspawn.getEntityKey( "script_transformer_glass_3" );
	transformerGlass4				= worldspawn.getEntityKey( "script_transformer_glass_4" );
	transformerGlass5				= worldspawn.getEntityKey( "script_transformer_glass_5" );
	transformerGlass6				= worldspawn.getEntityKey( "script_transformer_glass_6" );
      

	transformerBroken				= worldspawn.getEntityKey( "script_transformer_broken" );

	leftVentWaypoint				= worldspawn.getEntityKey( "script_hint_flyerdrone_1" );
	rightVentWaypoint				= worldspawn.getEntityKey( "script_hint_flyerdrone_2" );

	endCameraA						= worldspawn.getEntityKey( "script_placement_camera_a" );
	endCameraB						= worldspawn.getEntityKey( "script_placement_camera_b" );
	
	facilityTriggerHurt				= worldspawn.getEntityKey( "script_facility_trigger_hurt" );

	// Bot Obstacles

	westbreach_obstacle				= worldspawn.getEntityKey( "script_westbreach_obstacle_1" );
	bunkerdoor_obstacle				= worldspawn.getEntityKey( "script_bunkerdoor_obstacle_1" );
	eastbreach_obstacle				= worldspawn.getEntityKey( "script_eastbreach_obstacle_1" );
	door_obstacle_1					= worldspawn.getEntityKey( "script_door_obstacle_1" );
	door_obstacle_2					= worldspawn.getEntityKey( "script_door_obstacle_2" );
	door_obstacle_3					= worldspawn.getEntityKey( "script_door_obstacle_3" );
	facility_obstacle				= worldspawn.getEntityKey( "script_facility_obstacle" );
		
	transformerBroken.hide();
	transformerBroken.forceDisableClip();

	entranceDestroyed.hide();
	entranceDestroyed.forceDisableClip();

	pipes.hide();
	//pipesAll.hide();      // these are the whole, undamaged pipe structure
	pipesDamagedAll.hide();
	damagedPipes1.hide();
	damagedPipes2.hide();
	damagedPipes3.hide();
	damagedPipes4.hide();
	undamagedPipes1.hide();
	undamagedPipes2.hide();
	undamagedPipes3.hide();
	undamagedPipes4.hide();

	mainObjectiveIndex = OBJECTIVE_VOLCANO_HACK;
	bots_doors_destroyed = 0;

	objManager.setNextObjective( gdfTeam, mainObjectiveIndex );
	objManager.setNextObjective( stroggTeam, mainObjectiveIndex );

	gun1Construction.vCreateMission();
	gun2Construction.vCreateMission();
	gun3Construction.vCreateMission();
	gun5Construction.vCreateMission(); // gun4 is the one inside the facility

	eastBunkerBreach.vCreateMission();
	seawallBreach.vCreateMission();
	forwardBunkerDoor.vCreateMission();

	forwardBunkerDoorDestroyed       = false;
	seawallBreachDestroyed	   = false;
	eastBunkerBreachDestroyed	= false;

	breachesDestroyed = 0;

	gameRules.setEndGameCamera( endCameraB );

	thread StartFirstObjective();
	
	debug_script						=	sys.getCVar( "bot_debugMapScript", "1" );
   
	CreateDeployTasks();
	
	InitSplitObjectives( gameRules.getBeginObjective() );
}

void tacticalMapObject_Volcano::CompleteObjective( float index, entity p ) {
	float endObjective = gameRules.getEndObjective();
	
	if ( index == OBJECTIVE_VOLCANO_HACK ) {
		if ( gameRules.IsTactical() && endObjective > -1 && endObjective == OBJECTIVE_VOLCANO_HACK ) {
			OnHackFinal();
		} else {
			OnHack();
		}
	} else if ( index == OBJECTIVE_VOLCANO_DESTROY_TRANSFORMER ) {
		if ( gameRules.IsTactical() && endObjective > -1 && endObjective == OBJECTIVE_VOLCANO_DESTROY_TRANSFORMER ) {
			OnTransformerDestroyedFinal();
		} else {
			OnTransformerDestroyed();
		}
	} else if ( index == OBJECTIVE_VOLCANO_DAMAGE_CORE_TO80 ) {
		OnCoreDamaged1();
	} else if ( index == OBJECTIVE_VOLCANO_DAMAGE_CORE_TO60 ) {
		OnCoreDamaged2();
	} else if ( index == OBJECTIVE_VOLCANO_DAMAGE_CORE_TO40 ) {
		OnCoreDamaged3();
	} else if ( index == OBJECTIVE_VOLCANO_DAMAGE_CORE_TO20 ) {
		OnCoreDamaged4();
	} else if ( index == OBJECTIVE_VOLCANO_CORE_DESTROYED ) {
		OnCoreDestroyed();
	}
}

void tacticalMapObject_Volcano::OnHackFinal() {
	objective1.vFinishObjective();
	objective1Arrow1.vFinishObjective();
	objective1Arrow2.vFinishObjective();

	objManager.SetObjectiveEntity( $null_entity, -1 );

	objManager.PlaySound( worldspawn.getKey( "snd_stroggwin_strogg" ), stroggTeam );
	objManager.PlaySound( worldspawn.getKey( "snd_stroggwin_gdf" ), gdfTeam );

	securityControls.vCompleteMission();
	StopTimedMission();
	
	coreIdleEffect5.remove();
	gameRules.setEndGameCamera( endCameraA );

	gameRules.setWinningTeam( stroggTeam );
	gameRules.endGame();

	thread OnCoreDestroyedEffectsThread();
}

void tacticalMapObject_Volcano::OnTransformerDestroyedFinal() {
	objective2.vFinishObjective();
	objective2Arrow1.vFinishObjective();
	objective2Arrow2.vFinishObjective();
	
	objManager.SetObjectiveEntity( $null_entity, -1 );
	
	objManager.PlaySound( worldspawn.getKey( "snd_stroggwin_strogg" ), stroggTeam );
	objManager.PlaySound( worldspawn.getKey( "snd_stroggwin_gdf" ), gdfTeam );
		
	transformer.vCompleteMission();
	StopTimedMission();
	
	coreIdleEffect5.remove();
	gameRules.setEndGameCamera( endCameraA );
	
	gameRules.setWinningTeam( stroggTeam );
	gameRules.endGame();
		
	thread OnCoreDestroyedEffectsThread();
	
	facilityTerritory.setGameTeam( stroggTeam );

	gdfBaseTerritory.setActive( true );
	facilityTerritory.setActive( true );
	beachTerritory.setActive( false );

	stroggBunkerSpawn.setGameTeam( stroggTeam );

	gdfBunkerSpawn.setGameTeam( $null_entity );
	gdfFacilitySpawn.setGameTeam( gdfTeam );

	noplant_transformer.remove();

	transformerBroken.show();
	transformerBroken.forceEnableClip();

	pipes.show();
	pipesAll.hide();
	undamagedPipes1.show();
	undamagedPipes2.show();
	undamagedPipes3.show();
	undamagedPipes4.show();
}

void tacticalMapObject_Volcano::StartFirstObjective() {

	// Set up Bots for first objective
	objManager.setAttackingTeam( STROGG );
	objManager.setPrimaryTeamAction( GDF, "bjames_strogg_bunkerdoor_1" );
	objManager.setPrimaryTeamAction( STROGG, "bjames_strogg_bunkerdoor_1" );
	
	objManager.setTeamAttacksDeployables( STROGG, false );

	objManager.setBotCriticalClass( GDF, ENGINEER );
	objManager.setBotCriticalClass( STROGG, SOLDIER );

	objManager.activateBotActionGroup( VOL_GDF_BUILD_GUN1 );
	objManager.activateBotActionGroup( VOL_GDF_BUILD_GUN2 );
	objManager.activateBotActionGroup( VOL_GDF_BUILD_GUN3 );
	objManager.activateBotActionGroup( VOL_GDF_BUILD_GUN5 );

	objManager.activateBotActionGroup( VOL_GDF_DEFEND_BEACH_SPAWN );
	objManager.activateBotActionGroup( VOL_STROGG_ATTACK_BEACH_SPAWN );      
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_BUNKER_SPAWN );
	objManager.activateBotActionGroup( VOL_STROGG_ATTACK_BUNKER_SPAWN );
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_BEACH );
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_BUNKERDOOR );	
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_EAST_BUNKER );	
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_SEAWALL );
	objManager.activateBotActionGroup( VOL_GDF_OBJ1_DEPLOY );
	objManager.activateBotActionGroup( VOL_GDF_OBJ1AND2_DEPLOY );
	objManager.activateBotActionGroup( VOL_STROGG_OBJ1_DEPLOY );
	objManager.activateBotActionGroup( VOL_STROGG_BEACH_SUPPORT );
	objManager.activateBotActionGroup( VOL_STROGG_CAPTURE_BEACH_SPAWN );
	objManager.activateBotActionGroup( VOL_STROGG_DESTROY_BUNKERDOOR ); 
	objManager.activateBotActionGroup( VOL_STROGG_DESTROY_EAST_BUNKER );	
	objManager.activateBotActionGroup( VOL_STROGG_DESTROY_SEAWALL );   
	objManager.activateBotActionGroup( VOL_GDF_DEFEND_CONTROLS );

	objManager.setPrimaryTeamAction( STROGG, "strogg_hack_console_2" ); // only human prevent hack

	objManager.setBotSightDist( 3000.0f );
	objManager.SetObjectiveEntity( securityControls, mainObjectiveIndex );
	securityControls.vCreateMission();
	CreateInitialTimedMission( securityControls );

	seawallBreach.vCreateMission();
	eastBunkerBreach.vCreateMission();
	forwardBunkerDoor.vCreateMission();
	thread DelayedBotSpawnThread();
}

void tacticalMapObject_Volcano::StartTransformerObjective() {
	if ( !gameRules.IsTactical() ) {
		sys.wait( 15.f );
	}

	objManager.SetObjectiveEntity( transformer, mainObjectiveIndex );
	transformer.vCreateMission();
	CreateInitialTimedMission( transformer );
}

void tacticalMapObject_Volcano::StartCoreObjective() {
	if ( !gameRules.IsTactical() ) {
		sys.wait( 5.f );
	}

	objManager.SetObjectiveEntity( core5, mainObjectiveIndex );
	core5.vCreateMission();
	CreateInitialTimedMission( core5 );
}