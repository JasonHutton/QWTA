
object tacticalMapObject_Valley : mapObject_Valley {
	void			InitObjectives();
	void			InitSplitObjectives( float index );

	void			CompleteObjective( float index, entity p );

	void			OnBridgeBuiltSpecial( boolean deployMCP, boolean instantDeploy );
	void			OnBridgeBuiltFinal();
	void			OnOutpostCapturedSpecial( boolean instantDeploy );
	void			OnOutpostCapturedFinal();
	void			OnHackObjectiveFinal();

	vehicle_mcp		instantMCP;
	scud_trigger_structure instantShield;
}

tacticalMapObject_Valley Valley_TacticalMapScript() {
	return new tacticalMapObject_Valley;
}

void tacticalMapObject_Valley::InitSplitObjectives( float index ) {
	if ( gameRules.IsTactical() && index > -1 && index == OBJECTIVE_VALLEY_CAPTURE_OUTPOST ) {
		OnBridgeBuiltSpecial( false, false );
	} else if ( gameRules.IsTactical() && index > -1 && index == OBJECTIVE_VALLEY_HACK_OBJECTIVE ) {
		OnBridgeBuiltSpecial( true, true );
		OnOutpostCaptured();
	} else if ( gameRules.IsTactical() && index > -1 && index == OBJECTIVE_VALLEY_DESTROY_CONTAMINATOR ) {
		OnBridgeBuiltSpecial( true, true );
		OnOutpostCapturedSpecial( true );
		OnShieldHacked();
		G_TryFireScud( $null_entity, sys.getEntity( "<maps/references/valley/treatment_plant_hack>/building_corner" ) );
		OnHackObjective();
	}
	
}


void tacticalMapObject_Valley::InitObjectives() {
	gameRules.setWinningTeam( stroggTeam );
	gdfTeam.SetRespawnWait( 20 );
	stroggTeam.SetRespawnWait( 20 );
	gdfTeam.InitRespawnTimeChange();
	stroggTeam.InitRespawnTimeChange();
	CreateRespawnTimeThread( gdfTeam );

	gdfBaseTerritory		= worldspawn.getEntityKey( "script_gdf_base_territory" );
	bridgeTerritory			= worldspawn.getEntityKey( "script_bridge_territory" );
	outpost1Territory		= worldspawn.getEntityKey( "script_outpost1_territory" );
	stroggBaseTerritory		= worldspawn.getEntityKey( "script_strogg_base_territory" );
	outpost2Territory		= worldspawn.getEntityKey( "script_outpost2_territory" );

	gdfBaseArrow1			= worldspawn.getEntityKey( "script_obj1_arrow1" );
	gdfBaseArrow2			= worldspawn.getEntityKey( "script_obj1_arrow2" );
	tunnelArrow1			= worldspawn.getEntityKey( "script_obj2_arrow1" );
	tunnelArrow2			= worldspawn.getEntityKey( "script_obj2_arrow2" );
	outpostArrow1			= worldspawn.getEntityKey( "script_obj3_arrow1" );
	outpostArrow2			= worldspawn.getEntityKey( "script_obj3_arrow2" );
	reservoirArrow1			= worldspawn.getEntityKey( "script_obj4_arrow1" );
	reservoirArrow2			= worldspawn.getEntityKey( "script_obj4_arrow2" );

	objective1Marker		= worldspawn.getEntityKey( "script_obj1_marker" );
	objective2Marker		= worldspawn.getEntityKey( "script_obj2_marker" );
	objective3Marker		= worldspawn.getEntityKey( "script_obj3_marker" );
	objective4Marker		= worldspawn.getEntityKey( "script_obj4_marker" );

	entrance_smoke			= worldspawn.getEntityKey( "script_entrance_smoke" );
	entrance_rubble			= worldspawn.getEntityKey( "script_entrance_rubble" );

	entrance_blowout_1		= worldspawn.getEntityKey( "script_entrance_blowout_1" );
	entrance_blowout_2		= worldspawn.getEntityKey( "script_entrance_blowout_2" );
	entrance_blowout_3		= worldspawn.getEntityKey( "script_entrance_blowout_3" );

	final_sparks_1			= worldspawn.getEntityKey( "script_final_sparks_1" );
	final_sparks_2			= worldspawn.getEntityKey( "script_final_sparks_2" );
	final_sparks_3			= worldspawn.getEntityKey( "script_final_sparks_3" );
	final_sparks_4			= worldspawn.getEntityKey( "script_final_sparks_4" );

	final_steam_1			= worldspawn.getEntityKey( "script_final_steam_1" );
	final_steam_2			= worldspawn.getEntityKey( "script_final_steam_2" );
	final_steam_3			= worldspawn.getEntityKey( "script_final_steam_3" );
	final_steam_4			= worldspawn.getEntityKey( "script_final_steam_4" );
	final_steam_5			= worldspawn.getEntityKey( "script_final_steam_5" );
	final_steam_6			= worldspawn.getEntityKey( "script_final_steam_6" );
	final_steam_7			= worldspawn.getEntityKey( "script_final_steam_7" );
	final_steam_8			= worldspawn.getEntityKey( "script_final_steam_8" );

	endCameraA				= worldspawn.getEntityKey( "script_placement_camera_a" );
	endCameraB				= worldspawn.getEntityKey( "script_placement_camera_b" );

	bridgeConstruction		= worldspawn.getEntityKey( "script_bridge_materials" );
	contaminator			= worldspawn.getEntityKey( "script_contaminator" );

	effectEnt1				= worldspawn.getEntityKey( "script_final_effect" );


	gdfBaseSpawn			= worldspawn.getEntityKey( "script_gdf_base_spawn" );
	gdfTunnelSpawn			= worldspawn.getEntityKey( "script_gdf_tunnel_spawn" );
	stroggTunnelSpawn		= worldspawn.getEntityKey( "script_strogg_tunnel_spawn" );
	stroggBaseSpawn2		= worldspawn.getEntityKey( "script_strogg_base2_spawn" );
	stroggBaseSpawn1		= worldspawn.getEntityKey( "script_strogg_base1_spawn" );
	gdfOutpost1Spawn		= worldspawn.getEntityKey( "script_gdf_outpost1_spawn" );
	stroggOutpost1Spawn		= worldspawn.getEntityKey( "script_strogg_outpost1_spawn" );
	gdfForwardTunnelSpawn	= worldspawn.getEntityKey( "script_gdf_forward_tunnel_spawn" );
	gdfForwardReservoirSpawn	= worldspawn.getEntityKey( "script_gdf_forward_reservoir_spawn" );

	guardTower1				= worldspawn.getEntityKey( "script_gdf_tower_1_object" );
	guardTower1Construction	= worldspawn.getEntityKey( "script_gdf_tower_1" );
	guardTower2				= worldspawn.getEntityKey( "script_gdf_tower_2_object" );
	guardTower2Construction	= worldspawn.getEntityKey( "script_gdf_tower_2" );

	noplant_sewer_grate		= worldspawn.getEntityKey( "script_noplant_sewer_grate" );
	noplant_contamination_device 	= worldspawn.getEntityKey( "script_noplant_contamination_device" );

	sewerGrate				= worldspawn.getEntityKey( "script_sewer_grate" );

	mcpRoute				= worldspawn.getEntityKey( "script_mcp_route" );
	mcpCaller				= worldspawn.getEntityKey( "script_mcp_caller" );
	shieldCaller			= worldspawn.getEntityKey( "script_shieldgen_caller" );
	
	treatmentPlantDoor1		= worldspawn.getEntityKey( "script_plant_door_1" );
	treatmentPlantDoor2		= worldspawn.getEntityKey( "script_plant_door_2" );
	treatmentPlantDoor3		= worldspawn.getEntityKey( "script_plant_door_3" );

	botBridgeobstacle1		= worldspawn.getEntityKey( "script_bot_bridge_obstacle_1" );
	//botBridgeobstacle2	= worldspawn.getEntityKey( "script_bot_bridge_obstacle_2" );
	botPlantobstacle		= worldspawn.getEntityKey( "script_plant_obstacle" );
	botPlantDoors			= worldspawn.getEntityKey( "merge_script_door_obstacles" );

	debug_script		 	=	sys.getCVar( "bot_debugMapScript", "1" );
	
	CreateDeployTasks();
	
	gdfBaseSpawn.setGameTeam( gdfTeam );
	gdfTunnelSpawn.setGameTeam( $null_entity );
	stroggTunnelSpawn.setGameTeam( stroggTeam );
	stroggBaseSpawn2.setGameTeam( stroggTeam );
	stroggBaseSpawn1.setGameTeam( stroggTeam );
	gdfOutpost1Spawn.setGameTeam( $null_entity );
	stroggOutpost1Spawn.setGameTeam( stroggTeam );
	gdfForwardTunnelSpawn.vSetActive( false );
	gdfForwardReservoirSpawn.vSetActive( false );

	gdfBaseArrow1.setGameTeam( gdfTeam );
	gdfBaseArrow1.vStartObjective();
	gdfBaseArrow2.setGameTeam( gdfTeam );
	gdfBaseArrow2.vStartObjective();
	tunnelArrow1.setGameTeam( gdfTeam );
	tunnelArrow2.setGameTeam( gdfTeam );
	outpostArrow1.setGameTeam( gdfTeam );
	outpostArrow2.setGameTeam( gdfTeam );
	reservoirArrow1.setGameTeam( gdfTeam );
	reservoirArrow2.setGameTeam( gdfTeam );

	objective1Marker.vStartObjective();
	objective2Marker.vFinishObjective();
	objective3Marker.vFinishObjective();
	objective4Marker.vFinishObjective();

	gdfBaseTerritory.setActive( true );
	stroggBaseTerritory.setActive( false );
	bridgeTerritory.setActive( true );
	outpost1Territory.setActive( false );
	outpost2Territory.setActive( false );

	thread StartFirstObjective();

	gameRules.setEndGameCamera( endCameraB );

	guardTower1Construction.vCreateMission();

	sewerGrateDestroyed = false;
	guardTower2Built = false;
	
	mainObjectiveIndex = OBJECTIVE_VALLEY_BUILD_BRIDGE;
	objManager.setNextObjective( gdfTeam, mainObjectiveIndex );
	objManager.setNextObjective( stroggTeam, mainObjectiveIndex );

	SetupBot_BridgeObjective();
	
	InitSplitObjectives( gameRules.getBeginObjective() );
}

void tacticalMapObject_Valley::CompleteObjective( float index, entity p ) {
	float endObjective = gameRules.getEndObjective();
	
	if ( index == OBJECTIVE_VALLEY_BUILD_BRIDGE ) {
		if ( gameRules.IsTactical() && endObjective > -1 && endObjective == OBJECTIVE_VALLEY_BUILD_BRIDGE ) {
			OnBridgeBuiltFinal();
		} else {
			OnBridgeBuilt();
		}
	} else if ( index == OBJECTIVE_VALLEY_CAPTURE_OUTPOST ) {
		if ( gameRules.IsTactical() && endObjective > -1 && endObjective == OBJECTIVE_VALLEY_CAPTURE_OUTPOST ) {
			OnOutpostCapturedFinal();
		} else {
			OnOutpostCaptured();
		}
	} else if ( index == OBJECTIVE_VALLEY_HACK_OBJECTIVE ) {
		if ( gameRules.IsTactical() && endObjective > -1 && endObjective == OBJECTIVE_VALLEY_HACK_OBJECTIVE ) {
			OnHackObjectiveFinal();
		} else {
			OnHackObjective();
		}
	} else if ( index == OBJECTIVE_VALLEY_DESTROY_CONTAMINATOR ) {
		OnDeviceDestroyed();
	}
}

void tacticalMapObject_Valley::OnBridgeBuiltSpecial( boolean deployMCP, boolean instantDeploy ) {
	
	mainObjectiveIndex = OBJECTIVE_VALLEY_CAPTURE_OUTPOST;
	objManager.enableNode( "Bridge_Node_1" );
	objManager.enableNode( "Bridge_Node_2" );
	objManager.setNextObjective( gdfTeam, mainObjectiveIndex );
	objManager.setNextObjective( stroggTeam, mainObjectiveIndex );
	
	gdfBaseArrow1.vFinishObjective();
	gdfBaseArrow2.vFinishObjective();
	tunnelArrow1.vStartObjective();
	tunnelArrow2.vStartObjective();

	objective1Marker.vFinishObjective();
	objective2Marker.vStartObjective();
		
	bridgeTerritory.setGameTeam( gdfTeam );
	gdfTunnelSpawn.setGameTeam( gdfTeam );
	stroggTunnelSpawn.setGameTeam( $null_entity );

	gdfBaseTerritory.setActive( false );
	bridgeTerritory.setActive( true );
	outpost1Territory.setActive( true );

	gdfForwardTunnelSpawn.vSetActive( true );

	objManager.SetObjectiveEntity( $null_entity, -1 );

	StopTimedMission();
	bridgeConstruction.vCompleteMission();
	bridgeConstruction.vSetConstructedAdvanced( true, instantDeploy );
	bridgeConstruction.remove();
	guardTower1.vFreeMission();
	guardTower1Construction.vFreeMission();

	if ( deployMCP ) {
		if ( !instantDeploy ) {
			mcpCaller.vOnDeploy();
		} else {
			instantMCP = sys.spawn( "vehicle_mcp" );
			if ( instantMCP != $null_entity ) {
				entity mcpEntity = instantMCP;
				if ( mcpEntity != $null_entity ) {
					OnMCPDelivered( instantMCP );
				}
				instantMCP.setGameTeam( gdfTeam );
				vector markerOrigin = objective2Marker.getOrigin();
				markerOrigin_z = markerOrigin_z + 512;

				float frac = sys.tracePoint( markerOrigin, markerOrigin + ( vec3_down * MAX_WORLD_SIZE ), CONTENTS_SOLID | CONTENTS_MOVEABLECLIP | CONTENTS_PLAYERCLIP, $null_entity );
				vector pos = sys.getTraceEndPos() + '0 0 1';

				instantMCP.setOrigin( pos );
				instantMCP.setAngles( g_vectorZero );
				if ( mainObjectiveIndex == OBJECTIVE_VALLEY_CAPTURE_OUTPOST ) {
					objManager.SetObjectiveEntity( instantMCP, mainObjectiveIndex );
				}

				/*while( !instantMCP.hasGroundContacts() ) {
					sys.waitFrame();
				}*/
				//instantMCP.vSetManualDeploy();
				instantMCP.disableImpact();
				instantMCP.kickPlayer( 0, 0 );
				instantMCP.lock( 1.f );
				instantMCP.freeze( 1.f );
				instantMCP.disableSuspension( 1.f );
				instantMCP.setTakesDamage( false );
				if ( objManager.gameState == GS_GAMEON ) {
					instantMCP.Deploy( $null_entity );
				}
			}
		}

		if ( !instantDeploy ) {
			thread PostBridgeBuiltAudio();
		}
	}
	
	gdfTeam.SetRespawnWait( 15 );
	ResetRespawnTimeThread();
	
	botBridgeobstacle1.activate( botBridgeobstacle1 );
	//botBridgeobstacle2.activate( botBridgeobstacle1 );
		
	SetupBot_DeployMCP();
	thread DisableMcpBotAction();
}

void tacticalMapObject_Valley::OnBridgeBuiltFinal() {
	gdfBaseArrow1.vFinishObjective();
	gdfBaseArrow2.vFinishObjective();
	
	objManager.SetObjectiveEntity( $null_entity, -1 );
	
	objective1Marker.vFinishObjective();
	
	thread FinalEffectsThread();
	
	StopTimedMission();

	gameRules.setEndGameCamera( endCameraA );
	
	gameRules.setWinningTeam( gdfTeam );
	gameRules.endGame();
	
	contaminator.vCompleteMission();
}

void tacticalMapObject_Valley::OnOutpostCapturedSpecial( boolean instantDeploy ) {
	mainObjectiveIndex = OBJECTIVE_VALLEY_HACK_OBJECTIVE;
	objManager.setNextObjective( gdfTeam, mainObjectiveIndex );
	objManager.setNextObjective( stroggTeam, mainObjectiveIndex );

	gdfForwardTunnelSpawn.vSetActive( false );
	gdfForwardTunnelSpawn.setGameTeam( gdfTeam );

	gdfOutpost1Spawn.setGameTeam( gdfTeam );
	stroggOutpost1Spawn.setGameTeam( $null_entity );

	tunnelArrow1.vFinishObjective();
	tunnelArrow2.vFinishObjective();
	outpostArrow1.vStartObjective();
	outpostArrow2.vStartObjective();

	outpost1Territory.setGameTeam( gdfTeam );
	
	// ==========================================
	// Test
	gdfForwardReservoirSpawn.vSetActive( true );

	// give gdf territory outside final objective compound
	outpost2Territory.setGameTeam( gdfTeam );
	// End test
	// ==========================================

	objective2Marker.vFinishObjective();
	objective3Marker.vStartObjective();

	objManager.SetObjectiveEntity( $null_entity, -1 );

	if ( currentMCP != $null_entity ) {
		currentMCP.vCompleteMission();
	}
	StopTimedMission();

	if ( !guardTower2Built ) {
		guardTower2Construction.vCreateMission();
	}

	if ( !sewerGrateDestroyed ) {
		sewerGrate.vCreateMission();
	}

	if ( !instantDeploy ) {
		shieldCaller.vOnDeploy();
	} else {
		instantShield = sys.spawn( "gameplay_strogg_shield_generator" );
		if ( instantShield != $null_entity ) {
			vector markerOrigin = objective3Marker.getOrigin();
			markerOrigin_z = markerOrigin_z + 512;
								
			float frac = sys.tracePoint( markerOrigin, markerOrigin + ( vec3_down * MAX_WORLD_SIZE ), CONTENTS_SOLID | CONTENTS_MOVEABLECLIP | CONTENTS_PLAYERCLIP, $null_entity );
			vector pos = sys.getTraceEndPos() + '0 0 1';
								
			instantShield.setOrigin( pos );
			instantShield.setAngles( g_vectorZero );
			instantShield.vSetActive( true );
		}	
	}

/*
	G_PlayObjectiveCompletedRoll( GDF );
	objManager.PlaySound( worldspawn.getKey( "snd_outpost_captured_strogg" ), stroggTeam );
	objManager.PlaySound( worldspawn.getKey( "snd_outpost_captured_gdf" ), gdfTeam );
	*/
	
	gdfTeam.SetRespawnWait( 20 );
	// Test: old Strogg value was 30
	stroggTeam.SetRespawnWait( 20 );
	ResetRespawnTimeThread();
	SetupBot_HackShield();

}

void tacticalMapObject_Valley::OnOutpostCapturedFinal() {
	tunnelArrow1.vFinishObjective();
	tunnelArrow2.vFinishObjective();

	objective2Marker.vFinishObjective();

	objManager.SetObjectiveEntity( $null_entity, -1 );

	if ( currentMCP != $null_entity ) {
		currentMCP.vCompleteMission();
	}
	StopTimedMission();

	shieldCaller.vOnDeploy();

	G_PlayObjectiveCompletedRoll( GDF );
	objManager.PlaySound( worldspawn.getKey( "snd_outpost_captured_strogg" ), stroggTeam );
	objManager.PlaySound( worldspawn.getKey( "snd_outpost_captured_gdf" ), gdfTeam );
	
	gameRules.setEndGameCamera( endCameraA );
		
	gameRules.setWinningTeam( gdfTeam );
	gameRules.endGame();
		

	//SetupBot_HackShield();
}

void tacticalMapObject_Valley::OnHackObjectiveFinal() {

	objective3Marker.vFinishObjective();
	
	thread WallEffectsThread();
	
	scudTrigger.vFreeMission();

	outpostArrow1.vFinishObjective();
	outpostArrow2.vFinishObjective();

	treatmentPlantDoor1.remove();
	treatmentPlantDoor2.remove();
	treatmentPlantDoor3.remove();

	objManager.SetObjectiveEntity( $null_entity, -1 );
	
	SetupBot_DestroyDevice();
	
	gameRules.setEndGameCamera( endCameraA );
	
	gameRules.setWinningTeam( gdfTeam );
	gameRules.endGame();
	
	contaminator.vCompleteMission();
}