
object vehicle_weapon_streamshot : vehicle_weapon_base {
	void				preinit();
	void				init();
	void				destroy();

	void				Idle();
	void				Fire();

	void				OnSetPlayer( entity p );
	
	float				GetAxisDistance( float start, float endmin, float endmax );
	
	void				DoStream( boolean doDamage );
	void				UpdateStreamEffect( vector endOrigin );
	
	void				Cleanup( boolean bCleanMuzzleToo );
	void				Cleanup_Base( boolean bCleanMuzzleToo );

	string				muzzleFlashFX;
	string				muzzleSound;
	string				muzzleSoundLocal;

	float				fireRate;
	float				spread;

	float				projectileIndex;

	float				jointHandle;
	
	float				tracerCounter;
	float				tracerInterval;
	
	float				localSurface;

	entity				vehicle;

	boolean				playingOverheat;

	entity				muzzleFX;
	
	handle				streamEffectHandle;
	
	float				nextFiringSound;
	float				streamDamageIndex;
	
	float				streamRadius;
	float				streamArc;
	
	float				lastMuzzleFX;
	float				muzzleFlashInterval;
	
	float				minDamagePercent;
}

void vehicle_weapon_streamshot::preinit() {
	muzzleFlashFX			= getKey( "muzzle_flash" );
	muzzleSound				= getKey( "muzzle_sound" );
	muzzleSoundLocal		= getKey( "muzzle_sound" );

	fireRate				= getFloatKey( "fire_rate" );
	spread					= getFloatKey( "spread" );

	projectileIndex			= GetEntityDef( getKey( "def_projectile" ) );
	
	localSurface			= -1;
	
	vehicle					= getVehicle();

	string localSurfaceName	= getKey( "surface_name" );
	if ( localSurfaceName != "" ) {
		localSurface = vehicle.getSurfaceId( localSurfaceName );
	}
	
	jointHandle				= vehicle.getJointHandle( getKey( "muzzle" ) );
	tracerCounter			= 0;
	tracerInterval			= sys.getEntityDefIntKey( projectileIndex, "tracer_interval" );
	
	streamEffectHandle		= 0;
	
	nextFiringSound			= 0;
	
	streamDamageIndex		= GetDamage( getKey( "dmg_stream" ) );
	
	streamRadius			= getFloatKey( "stream_radius" );
	streamArc				= getFloatKey( "stream_arc" );
	
	lastMuzzleFX			= 0;
	muzzleFlashInterval		= vehicle.getFloatKeyWithDefault( "muzzle_flash_interval", 0.5f );
	
	minDamagePercent		= ( vehicle.getFloatKeyWithDefault( "min_damage_percent", 0.f ) / 100.f );
}

void vehicle_weapon_streamshot::init() {
}

void vehicle_weapon_streamshot::destroy() {
	Cleanup( true );
}

void vehicle_weapon_streamshot::Idle() {
	SetCrosshair();

	while ( true ) {
		sys.waitFrame();

		UpdateCharge();

		if ( user != $null_entity ) {
			user.proxyFiringWeaponStart = false;
			if ( user.getButton( PK_ATTACK ) && !myVehicle.isWeaponEMPed() && !myVehicle.isWeaponDisabled() ) {
				if ( CanRemoveCharge() ) {
					if ( sys.getTime() >= fireDelayTime ) {
						user.proxyFiringWeaponStart = true;
						if ( sys.getTime() >= reFireTime ) {
							playingOverheat = false;
							setState( "Fire" );
						}
					} else {
						if ( !playingOverheat ) {
							vehicle.startSound( "snd_gpmg_overheat", SND_WEAPON_FIRE_LOCAL );
							
							Cleanup( false );
							
							playingOverheat = true;
						}
					}
				}
			} else {
				Cleanup( true );
			}
		}
	}
}

void vehicle_weapon_streamshot::Fire() {
	boolean showMuzzle = true;
	
	RemoveCharge();

	if ( localSurface != -1 ) {
		if ( vehicle.isSurfaceHidden( localSurface ) ) {
			showMuzzle = false;
		}
	}

	DoStream( true );
	
	if ( showMuzzle ) {
		if ( sys.getTime() - lastMuzzleFX > muzzleFlashInterval ) {
			if ( muzzleFX != $null_entity ) {
				muzzleFX.unbind();
				muzzleFX.endEffect( false );
				muzzleFX = $null_entity;
			}

			// spawn explicitly so we can get an entity to call endEffect on.
			muzzleFX = vehicle.spawnClientEffect( muzzleFlashFX );
			if ( muzzleFX != $null_entity ) {
				muzzleFX.bindToJoint( vehicle, getKey( "muzzle" ), 1 );
			}

			lastMuzzleFX = sys.getTime();
		}
	}

	if( user == sys.getLocalPlayer() ) {
		vehicle.playJointEffect( muzzleSoundLocal, jointHandle, 0 );
	} else {
		vehicle.playJointEffect( muzzleSound, jointHandle, 0 );
	}
	
	AddReFireDelay( fireRate );

	tracerCounter++;

	GoToIdle();
}

void vehicle_weapon_streamshot::OnSetPlayer( entity p ) {
	OnSetPlayer_Base( p );
	Cleanup( true );
}

float vehicle_weapon_streamshot::GetAxisDistance( float start, float endmin, float endmax ) {
	float result;
	if ( start < endmin ) {
		result = endmin - start;
	} else  if( start > endmax ) {
		result = start - endmax;
	} else {
		result = 0.f;
	}

	return result;
}

void vehicle_weapon_streamshot::DoStream( boolean doDamage ) {
//	fired();

//	float mask = MASK_PROJECTILE | MASK_SHOT_BOUNDINGBOX;
//	if ( sys.isClient() ) {
//		mask = mask | CONTENTS_WATER;
//	}
//	sys.enablePlayerHeadModels();

	vector startPos = vehicle.getJointPos( jointHandle );
	vector traceDir = vehicle.getJointAxis( jointHandle, 0 );
	vector endPos = startPos + ( traceDir * streamRadius );

	vector mins, maxs;
	mins_x = startPos_x - streamRadius;
	mins_y = startPos_y - streamRadius;
	mins_z = startPos_z - streamRadius;
	
	maxs_x = startPos_x + streamRadius;
	maxs_y = startPos_y + streamRadius;
	maxs_z = startPos_z + streamRadius;
	
	float count = vehicle.entitiesInBounds( mins, maxs, MASK_PROJECTILE, 1 );
	/*
	float traceFraction = sys.tracePoint( startPos, endPos, MASK_SHOT_RENDERMODEL, $null_entity );
	vector endOrigin = endPos;
	if( traceFraction < 1.0f ) {
		endOrigin = sys.getTraceEndPos();
	}*/
	
	float i;
	float angleRange = sys.cos( streamArc * 0.5f );
	
	for ( i = 0; i < count; i++ ) {
		entity ent = vehicle.getBoundsCacheEntity( i );
		
		if ( ent == $null_entity ) {
			continue;
		}

		vector targetDir = sys.vecNormalize( ent.getWorldOrigin() - startPos );

		if ( ent == vehicle ) {
			continue;
		}

		if ( targetDir * traceDir < angleRange ) {
			continue;
		}
		
		vector dist;
		vector absMins = ent.getAbsMins();
		vector absMaxs = ent.getAbsMaxs();
		dist_x = GetAxisDistance( startPos_x, absMins_x, absMaxs_x );
		dist_y = GetAxisDistance( startPos_y, absMins_y, absMaxs_y );
		dist_z = GetAxisDistance( startPos_z, absMins_z, absMaxs_z );
		float distance = sys.vecLength( dist );
		
		if ( distance >= streamRadius ) 
		{
			continue;
		}
		
		if ( sys.tracePoint( ent.getWorldOrigin(), startPos, MASK_SHOT_RENDERMODEL, ent ) < 1.0f ) {
			if ( sys.getTraceEntity() != vehicle ) {

				continue;
			}
		}
		
		float scale = ( distance / streamRadius );
		if ( scale < minDamagePercent ) {
			scale = minDamagePercent;
		}
		scale = 1.f - scale;
		
		if ( doDamage ) {
			ent.applyDamage( self, getPlayer(), traceDir, streamDamageIndex, scale, $null_entity );
		}
	}

	// AddHeat();
	// sys.disablePlayerHeadModels()

	UpdateStreamEffect( endPos );
}

void vehicle_weapon_streamshot::UpdateStreamEffect( vector endOrigin ) {
	
	if ( !streamEffectHandle ) {
		streamEffectHandle = vehicle.playJointEffectViewSuppress( "fx_flamethrower_stream", jointHandle, 1, 0 );
	}

	if( sys.getTime() > nextFiringSound ) {
		nextFiringSound = sys.getTime() + vehicle.startSound( "snd_flamethrower_stream", SND_WEAPON_FIRE );
	}
}

void vehicle_weapon_streamshot::Cleanup( boolean bCleanMuzzleToo ) {
	Cleanup_Base( bCleanMuzzleToo );
}
	
void vehicle_weapon_streamshot::Cleanup_Base( boolean bCleanMuzzleToo ) {
	if ( bCleanMuzzleToo ) {
		if ( muzzleFX != $null_entity ) {
			muzzleFX.unbind();
			muzzleFX.endEffect( true );
			muzzleFX = $null_entity;
		}
	}
		
	if ( vehicle != $null_entity ) {
		vehicle.stopEffectHandle( streamEffectHandle );
		vehicle.stopSound( SND_WEAPON_FIRE );
	}
	streamEffectHandle = 0;
	nextFiringSound = 0;
}