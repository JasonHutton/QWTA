
object vehicle_weapon_chargeshot2 : vehicle_weapon_powerup {
		void		preinit();
		void		destroy();

		void 		OnSetPlayer( entity p );
		
		void 		OnBecomeViewWeapon();
		void 		OnFinishViewWeapon();
		
		void		Idle();
		void		Fire();
		void		Overcharge();
		void		Fizzle();
		
		float 		jointHandle;
		
		string	muzzleChargeFX;
		string	muzzleChargeSound;
		string	muzzleChargeSoundLocal;
		
		string	muzzleFlashFX;
		string	muzzleFlashSound;
		string	muzzleFlashSoundLocal;
		
		string	muzzleFizzleFX;
		string	muzzleFizzleSound;
		
		string	cleanExplodeFX;
		
		handle		muzzleChargeEffectHandle;
		float		muzzleChargeSoundTime;
		boolean		muzzleChargeSoundPlaying;
		float		muzzleChargeSoundLocalTime;
		boolean		muzzleChargeSoundLocalPlaying;
		
		handle		muzzleFlashEffectHandle;
		float		muzzleFlashSoundTime;
		float		muzzleFlashSoundLocalTime;

		boolean		bPowerupInProgress;
		
		float	projectileIndex;
		vector	velocity;
		
		float		overchargedIndex;
		boolean		bIsOverCharged;
}

void vehicle_weapon_chargeshot2::preinit() {		
	jointHandle			= myVehicle.getJointHandle( getKey( "muzzle" ) );
	
	muzzleChargeFX		= getKey( "muzzle_charge" );
	muzzleChargeSound			= getKey( "muzzle_chargesound" );
	muzzleChargeSoundLocal	= getKey( "muzzle_chargesound_local" );
	
	muzzleFlashFX		= getKey( "muzzle_flash" );
	muzzleFlashSound			= getKey( "muzzle_sound" );
	muzzleFlashSoundLocal	= getKey( "muzzle_sound_local" );
	
	muzzleFizzleFX		= getKey( "muzzle_fizzle" );
	muzzleFizzleSound	= getKey( "muzzle_dryfire" );
	
	cleanExplodeFX		= getKey( "clean_explode" );
	
	muzzleChargeEffectHandle = 0;
	muzzleChargeSoundTime = 0;
	muzzleChargeSoundPlaying = false;
	muzzleChargeSoundLocalTime = 0;
	muzzleChargeSoundLocalPlaying = false;
	
	muzzleFlashEffectHandle = 0;
	muzzleFlashSoundTime = 0;
	muzzleFlashSoundLocalTime = 0;
	
	bPowerupInProgress = false;
	
	projectileIndex		= GetEntityDef( getKey( "def_projectile" ) );
	velocity			= getVectorKey( "velocity" );
	
	overchargedIndex	= GetDamage( getKey( "dmg_bfg_overcharged" ) );
	bIsOverCharged		= false;
}

void vehicle_weapon_chargeshot2::destroy() {
	if ( user == sys.getLocalViewPlayer() && user != $null_entity ) {	
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0 );
		KillUpdatePowerup();
	}

	delete weaponBar;
}

void vehicle_weapon_chargeshot2::OnSetPlayer( entity p ) {
	OnSetPlayer_Base( p );
	
	if( user == sys.getLocalViewPlayer() && user != $null_entity ) {
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );	
	}
	
	if ( /*hasHeat &&*/ user == sys.getLocalViewPlayer() && user != $null_entity ) {
		CreateUpdatePowerup();
	} /*else if ( myVehicle.vGetManualDeploy() ) {
		KillUpdatePowerup();
	}*/
}

void vehicle_weapon_chargeshot2::OnBecomeViewWeapon() {
	SetCrosshair();
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.energyBarCharge", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.energyAvailable", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "gameHud.weaponShowCharge", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );
	if ( /*hasHeat &&*/ user == sys.getLocalViewPlayer() && user != $null_entity ) {
		CreateUpdatePowerup();
	}
}

void vehicle_weapon_chargeshot2::OnFinishViewWeapon() {
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0.f );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0.f );
	KillUpdatePowerup();
}

void vehicle_weapon_chargeshot2::Idle() {
	SetCrosshair();

	while ( true ) {
		sys.waitFrame();

		UpdateCharge();
		
		boolean bFiringHeld = false;
		
		if ( user != $null_entity ) {
			user.proxyFiringWeaponStart = false;
			if ( user.getButton( PK_ATTACK ) && !myVehicle.isWeaponEMPed() && !myVehicle.isTeleporting()  && ( sys.getTargetTimerValue( powerupTimerHandle, user ) - sys.getTime() <= 0 || bPowerupInProgress ) ) {
				AddPowerup();
				if ( CanRemoveCharge() && sys.getTime() >= fireDelayTime ) {
					bFiringHeld = true;
					if ( !bPowerupInProgress ) {
						bPowerupInProgress = true;
					}
					
					if ( !muzzleChargeEffectHandle ) {
						muzzleChargeEffectHandle = myVehicle.playJointEffect( muzzleChargeFX, jointHandle, 0 );
					}
					if( user == sys.getLocalPlayer() ) {
						if ( sys.getTime() > muzzleChargeSoundLocalTime && !muzzleChargeSoundLocalPlaying ) {
							muzzleChargeSoundLocalTime = sys.getTime() + myVehicle.startSound( muzzleChargeSoundLocal, SND_WEAPON_FIRE_LOCAL );
							muzzleChargeSoundLocalPlaying = true;
						}
					}
					else {
						if ( sys.getTime() > muzzleChargeSoundTime && !muzzleChargeSoundPlaying ) {
							muzzleChargeSoundTime = sys.getTime() + myVehicle.startSound( muzzleChargeSound, SND_WEAPON_FIRE );
							muzzleChargeSoundPlaying = true;
						}
					}
					
					if ( bPowerupInProgress ) {
						if ( !myVehicle.isWeaponEMPed() && !myVehicle.isTeleporting() && sys.getTargetTimerValue( powerupTimerHandle, user ) - sys.getTime() > powerupLength ) {
							setState( "Overcharge" );
						}
					}
				}
			}
		}
		if ( !bFiringHeld && !bIsOverCharged ) {
			if ( muzzleChargeEffectHandle ) {
				myVehicle.stopEffectHandle( muzzleChargeEffectHandle );
				muzzleChargeEffectHandle = 0;
			}
			if ( user == sys.getLocalPlayer() ) {
				myVehicle.stopSound( SND_WEAPON_FIRE_LOCAL );
				muzzleChargeSoundLocalPlaying = false;
			} else {
				myVehicle.stopSound( SND_WEAPON_FIRE );
				muzzleChargeSoundPlaying = false;
			}
			if ( bPowerupInProgress ) {
				if ( !myVehicle.isWeaponEMPed() && !myVehicle.isTeleporting() && sys.getTargetTimerValue( powerupTimerHandle, user ) - sys.getTime() > powerupSafeLength ) {
					user.proxyFiringWeaponStart = true;
					if ( sys.getTime() >= reFireTime ) {
						setState( "Fire" );
					}
				} else { 
					if ( sys.getTime() >= reFireTime ) {
						setState( "Fizzle" );
					}
				}
			}
		}
	}
}

void vehicle_weapon_chargeshot2::Overcharge() {	
	bIsOverCharged = true;
	
	vector centerOrigin = myVehicle.getAbsMaxs() - myVehicle.getAbsMins();
	centerOrigin_x = centerOrigin_x / 2.f;
	centerOrigin_y = centerOrigin_y / 2.f;
	centerOrigin_z = centerOrigin_z / 2.f;
	myVehicle.playOriginEffect( cleanExplodeFX, "", centerOrigin, vec3_up, false );
	
	myVehicle.applyDamage( myVehicle, self, vec3_up, overchargedIndex, 1.f, $null_entity );
	
	AddReFireDelay( fireRate );
	RemoveCharge();

	bPowerupInProgress = false;
	
	GoToIdle();
}

void vehicle_weapon_chargeshot2::Fizzle() {
	myVehicle.startSound( muzzleFizzleSound, SND_WEAPON_DRYFIRE );
	myVehicle.playJointEffect( muzzleFizzleFX, jointHandle, 0 );
	if ( muzzleChargeEffectHandle ) {
		myVehicle.killEffectHandle( muzzleChargeEffectHandle );
		muzzleChargeEffectHandle = 0;
	}
	
	AddReFireDelay( fireRate );
	RemoveCharge();
	
	bPowerupInProgress = false;
	
	GoToIdle();
}

void vehicle_weapon_chargeshot2::Fire() {
	vector origin = myVehicle.getJointPos( jointHandle );

	vector vehicleVelocity = myVehicle.getLinearVelocity();
	vehicleVelocity_z = 0.f;

	float velocityLength = sys.vecLength( velocity );
	vector forward;
	if ( user != $null_entity ) {
		forward = sys.angToForward( user.getRenderViewAngles() );
	} else {
		forward = myVehicle.jointToWorldSpace( jointHandle, velocity ) * ( 1 / velocityLength );
	}

	vector projectileVelocity = forward * velocityLength;

	float forwardVelocity = vehicleVelocity * forward;
	if ( forwardVelocity > 0.0f ) {
		projectileVelocity += forward * forwardVelocity;
	}

	myVehicle.launchMissileSimple( user, myVehicle, $null_entity, projectileIndex, -1, spread, origin, projectileVelocity );
	if ( !muzzleFlashEffectHandle ) {
		muzzleFlashEffectHandle = myVehicle.playJointEffect( muzzleFlashFX, jointHandle, 0 );
	}
	/*if( user == sys.getLocalPlayer() ) {
		myVehicle.playJointEffect( muzzleSoundLocal, jointHandle, 0 );
	} else {
		myVehicle.playJointEffect( muzzleSound, jointHandle, 0 );
	}*/

	AddReFireDelay( fireRate );
	RemoveCharge();
	
	bPowerupInProgress = false;

	GoToIdle();
}