object vehicle_weapon_powerup : vehicle_weapon_base {
	void				preinit();
	void				destroy();
	void				OnSetPlayer_Base( entity p );

	void				OnBecomeViewWeapon();
	void				OnFinishViewWeapon();

	void				KillUpdatePowerup();
	void				CreateUpdatePowerup();
	void				UpdatePowerup();

	void				AddPowerup();
	void				Overcharge_Base();
	void				Overcharge() { Overcharge_Base(); }
	void				Fizzle_Base();
	void				Fizzle() { Fizzle_Base(); }


	float				powerupThreadId;
	float				powerupTimerHandle;
	float				powerupPerShot;
	float				powerupLength;
	float				powerupSafeLength;
	
	float				fireRate;
	float				spread;
}

void vehicle_weapon_powerup::preinit() {
	powerupTimerHandle = sys.allocTargetTimer( myVehicle.getKeyWithDefault( "timer_powerup", "powerup_default" ) );
	powerupPerShot = myVehicle.getFloatKeyWithDefault( "powerup_per_shot", 0.5f );
	powerupLength = myVehicle.getFloatKeyWithDefault( "powerup_length", 5.0f );
	powerupSafeLength = powerupLength - 0.5f;
	powerupThreadId = -1;
	
	fireRate			= getFloatKey( "fire_rate" );
	if ( g_realisticROF.getBoolValue() ) {
		fireRate		= getFloatKeyWithDefault( "realistic_fire_rate", fireRate );
	}
	spread				= getFloatKey( "spread" );
}

void vehicle_weapon_powerup::destroy() {
	if ( user == sys.getLocalViewPlayer() && user != $null_entity ) {	
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0 );
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );
	}

	delete weaponBar;
}

void vehicle_weapon_powerup::OnSetPlayer_Base( entity p ) {
	if ( user == p ) {
		return;
	}
	
	if( user == sys.getLocalViewPlayer() && user != $null_entity ) {
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0 );
		sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );
	}

	user = p;
	if ( user != $null_entity ) {
		user.proxyFiringWeapon = false;
		user.proxyFiringWeaponStart = false;
	}
	
	vCheckProficiency();

	weaponBar.SetOwner( user );

	GoToIdle();
}

void vehicle_weapon_powerup::OnBecomeViewWeapon() {
	SetCrosshair();
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.energyBarCharge", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.energyAvailable", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "gameHud.weaponShowCharge", 1 );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );
	if ( user == sys.getLocalViewPlayer() && user != $null_entity ) {	
		CreateUpdatePowerup();
	}
}

void vehicle_weapon_powerup::OnFinishViewWeapon() {
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.cooling", 0.f );
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 0 );
	KillUpdatePowerup();
}

void vehicle_weapon_powerup::KillUpdatePowerup() {
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.showPowerup", 0.f );
	sys.killThread( "UpdatePowerup_" + myVehicle.getName() );
}

void vehicle_weapon_powerup::CreateUpdatePowerup() {
	KillUpdatePowerup();
	sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.showPowerup", 1.f );
	thread UpdatePowerup();
}

// This is one ugly hack of a function. Would be much better if I could divine a way to
// terminate it properly from outside...
void vehicle_weapon_powerup::UpdatePowerup() {
	float powerupValue;
	float fraction;

	while ( true && user != $null_entity ) {
		sys.waitFrame();

		if ( user != $null_entity ) {
			powerupValue = sys.getTargetTimerValue( powerupTimerHandle, user ) - sys.getTime();
			if ( powerupValue < 0 ) {
				powerupValue = 0;
			} else if ( powerupValue > powerupLength ) {
				powerupValue = powerupLength;
			}

			fraction = 1 - ( powerupValue / powerupLength );

			sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", fraction );
		} else {
			// Because this is threaded and killing itself internally, we don't know if it'll be 
			// timely or not, so we should zero out infantry's powerup bar...
			sys.setGUIFloat( GUI_GLOBALS_HANDLE, "weapons.powerup", 1.f );
		}
		//sys.print("UpdatePowerup()\n"); // So we know if it's shutting itself off or not.
	}
}

void vehicle_weapon_powerup::AddPowerup() {
	float powerupValue = sys.getTargetTimerValue( powerupTimerHandle, user );

	if ( powerupValue < sys.getTime() ) {
		powerupValue = sys.getTime();
	}
	
	if ( powerupValue > powerupLength + sys.getTime() ) {
		powerupValue = powerupLength + sys.getTime();
	} else {
		powerupValue = powerupValue + powerupPerShot;
	}

	sys.setTargetTimerValue( powerupTimerHandle, user, powerupValue );
}

void vehicle_weapon_powerup::Overcharge_Base() {	

	AddReFireDelay( fireRate );
	RemoveCharge();
	RemoveAmmo();

	GoToIdle();
}

void vehicle_weapon_powerup::Fizzle_Base() {
	
	AddReFireDelay( fireRate );
	RemoveCharge();
	RemoveAmmo();
	
	GoToIdle();
}