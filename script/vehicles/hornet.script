

/*
===================================================================================================

HORNET

===================================================================================================
*/
object vehicle_hornet : vehicle_heli {
	void			preinit();
	void			init();

	void			OnWeaponSelected( entity p, float index );

	void			vSetManualDeploy();
	void			vOnDeploy();
	void			DoBoundsDamageThread();

	void			vSetDeployableOwner( entity p );
	void			vRemoveObject();

	boolean			manualDeploy;
};

void vehicle_hornet::preinit() {
	manualDeploy = false;
}

void vehicle_hornet::init() {
	if ( !sys.isClient() ) {
		if ( manualDeploy ) {
			setTakesDamage( false );
			thread DoBoundsDamageThread();
		}
	}
}

void vehicle_hornet::OnWeaponSelected( entity p, float index ) {
	if ( !sys.isClient() ) {
		if ( index == 0 ) {
			FireDecoy( p );
		} else if ( index == 1 ) {
			selectVehicleWeapon( p, "plasmacannon" );
		} else if ( index == 2 ) {
			selectVehicleWeapon( p, "strockets" );
		}
	}
}

void vehicle_hornet::vOnDeploy() {
	vector origin = getWorldOrigin();
	setWorldOrigin( origin + '0 0 32' );
	setLinearVelocity( vec3_origin );
	sys.killThread( "DoBoundsDamageThread_" + getName() );
	setTakesDamage( true );
}

void vehicle_hornet::vSetManualDeploy() {
	manualDeploy = true;
}

void vehicle_hornet::DoBoundsDamageThread() {
	float dmgIndex = GetDamage( getKey( "dmg_falling" ) );

	while ( true ) {
		BoundsDamage( self, dmgIndex );
		sys.waitFrame();
	}
}

void vehicle_hornet::vSetDeployableOwner( entity p ) {
	if ( !sys.isClient() ) {
		if ( p != $null_entity ) {
			p.binAdd( self );
		}
	}
}

void vehicle_hornet::vRemoveObject() {
	if ( isEmpty() ) {
		thread DecayThread();
	}
}
