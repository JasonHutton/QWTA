/***********************************************************************

tool_force_shield.script

***********************************************************************/

object tool_force_shield_qwta : tool_force_shield {
	void		preinit();
	void		init();
	void		destroy();

	void		Raise();
	void		Lower();
	void		Idle();

	void		Fire();

	boolean		CanFire();
	
	void		ToolTipThread_Raise();
	
	void		StartIdleEffect();
	void		StopIdleEffect();

	void		StartIdleEffect_Local();
	void		StopIdleEffect_Local();
	void		StartIdleEffect_World();
	void		StopIdleEffect_World();
	
	void		StartRechargeEffect();
	void		StopRechargeEffect();

	boolean		recharge;
	float		nextChargeMessageTime;
	
	boolean		rechargeEffectOn;
	boolean		idleEffectOn;
	boolean		worldIdleEffectOn;
}

void tool_force_shield_qwta::preinit() {
	rechargeEffectOn = false;
	idleEffectOn = false;
	worldIdleEffectOn = false;
}

void tool_force_shield_qwta::init() {
	if ( myPlayer.isLocalPlayer() ) {
		thread ToolTipThread_Raise();
	}

	weaponState( "Raise", 0 );
}

void tool_force_shield_qwta::destroy() {
	StopIdleEffect();
	StopRechargeEffect();
}

void tool_force_shield::Raise() {
	UpdateCharge();

	Base_Raise();
}

void tool_force_shield_qwta::Lower() {
	StopIdleEffect();
	StopRechargeEffect();

	Base_Lower();
}

void tool_force_shield_qwta::Idle() {
	weaponReady();
	boolean playingRecharge;
	if ( recharge ) {
		playingRecharge = true;
		recharge = false;
		playAnim( ANIMCHANNEL_ALL, "recharge" );

		StopIdleEffect();
		StartRechargeEffect();
	} else {
		playCycle( ANIMCHANNEL_ALL, "idle" );
		
		StopRechargeEffect();
		StartIdleEffect();
	}

	while ( true ) {
		if ( WEAPON_LOWERWEAPON ) {
			weaponState( "Lower", 4 );
		}

		if ( WEAPON_ATTACK ) {
			if ( !mainFireDown ) {
				mainFireDown = true;
				if ( CanFire() ) {
					weaponState( "Fire", 0 );
				} else {
					if ( myPlayer.isLocalPlayer() ) {
						myPlayer.sendToolTip( GetToolTip( getKey( "tt_need_charge" ) ) );
						sys.startSoundDirect( getKey( "snd_need_charge" ), SND_ANY );
						G_NotifyNoCharge( myPlayer );
					}
				}
			}
		} else {
			mainFireDown = false;
		}

		UpdateCharge();

		if ( playingRecharge ) {
			if ( animDone( ANIMCHANNEL_ALL, 4 ) ) {
				playingRecharge = false;

				setBlendFrames( ANIMCHANNEL_ALL, 4 );
				playCycle( ANIMCHANNEL_ALL, "idle" );

				StopRechargeEffect();
				StartIdleEffect();
			}
		} else {
			// this won't restart the effect if its already playing, but will 
			// fix the effect if the wrong one is playing
			StartIdleEffect();		
		}

		sys.waitFrame();
	}
}

boolean tool_force_shield_qwta::CanFire() {
	return myPlayer.EnergyBar_CanRemove( chargePerUse );
}

void tool_force_shield_qwta::Fire() {
	playAnim( ANIMCHANNEL_ALL, "fire" );
	fired();
	sys.wait( 0.1 );

	if ( !sys.isClient() ) {
		myPlayer.EnergyBar_Remove( chargePerUse );
		
		string defName = "def_forcefield";
		if ( myPlayer.getProficiency( g_proficiencyOppressor ) >= 2 ) {
			defName = "def_forcefield_mega";
		}

		entity shieldProj = sys.spawn( getKey( defName ) );
		
		vector origin = myPlayer.getViewOrigin();
		vector forward = sys.angToForward( myPlayer.getViewAngles() );
		float throwDistance = 32.0f;
		vector throwPos = origin + forward * throwDistance;
		float meleeDistance = 64.0f;
		
		if( melee( MASK_SHOT_BOUNDINGBOX | MASK_PROJECTILE, meleeDistance, true, false ) ) {
			float traceDistance = getMeleeFraction() * meleeDistance;

			vector size = shieldProj.getSize();
			float pullOut = sys.vecLength( size ) * 0.6f;

			if ( traceDistance < meleeDistance + pullOut ) {
				throwPos = origin + forward * ( traceDistance - pullOut );
			}
		}

		myPlayer.setForceShieldState( false, shieldProj ); //mal: let the bots know theres a shield out there in the world.
		
		shieldProj.setOrigin( throwPos );
		vector velocity = shieldProj.getVectorKeyWithDefault( "velocity", '400 0 0' );
		velocity = forward * velocity_x;
		shieldProj.setLinearVelocity( velocity );
		shieldProj.vSetOwner( myPlayer );
	}

	waitUntil( animDone( ANIMCHANNEL_ALL, 1 ) );
	recharge = true;
	
	nextChargeMessageTime = sys.getTime() + 2.f;
	
	weaponState( "Idle", 1 );
}

void tool_force_shield_qwta::ToolTipThread_Raise() {
	sys.wait( myPlayer.CalcTooltipWait() );
	while ( myPlayer.isSinglePlayerToolTipPlaying() ) {
		sys.wait( 1.0f );
	}
	myPlayer.cancelToolTips();

	WAIT_FOR_TOOLTIP;
	myPlayer.sendToolTip( GetToolTip( getKey( "tt_intro_1" ) ) );
	
	WAIT_FOR_TOOLTIP;
	myPlayer.sendToolTip( GetToolTip( getKey( "tt_intro_2" ) ) );
}

void tool_force_shield_qwta::StartIdleEffect_Local() {
	if ( idleEffectOn == false ) {
		playEffect( "fx_loop", "joint7", 1 );
		idleEffectOn = true;
	}
}

void tool_force_shield_qwta::StopIdleEffect_Local() {
	if ( idleEffectOn == true ) {
		stopEffect( "fx_loop" );
		idleEffectOn = false;
	}
}

void tool_force_shield_qwta::StartIdleEffect_World() {
	if ( worldIdleEffectOn == false ) {
		entity worldModel = getWorldModel( 0 ); // FIXME
		handle effectHandle = worldModel.playEffect( "fx_loop_world", "origin", 1 );
		if ( effectHandle ) {
			worldIdleEffectOn = true;
		}
	}
}

void tool_force_shield_qwta::StopIdleEffect_World() {
	if ( worldIdleEffectOn == true ) {
		entity worldModel = getWorldModel( 0 ); // FIXME
		worldModel.stopEffect( "fx_loop_world" );
		worldIdleEffectOn = false;
	}
}

void tool_force_shield_qwta::StartIdleEffect() {
	if ( myPlayer == sys.getLocalPlayer() && !pm_thirdperson.getBoolValue() ) {
		StartIdleEffect_Local();
		StopIdleEffect_World();
	} else {
		StopIdleEffect_Local();
		StartIdleEffect_World();
	}
}

void tool_force_shield_qwta::StopIdleEffect() {
	StopIdleEffect_Local();
	StopIdleEffect_World();
}
	
void tool_force_shield_qwta::StartRechargeEffect() {
	if ( rechargeEffectOn == false ) {
		playEffect( "fx_recharge", "joint7", 0 );
		playEffect( "fx_recharge2", "joint4", 0 );
		playEffect( "fx_recharge3", "joint1", 0 );
		rechargeEffectOn = true;
	}
}

void tool_force_shield_qwta::StopRechargeEffect() {
	if ( rechargeEffectOn == true ) {
		stopEffect( "fx_recharge" );
		stopEffect( "fx_recharge2" );
		stopEffect( "fx_recharge3" );
		rechargeEffectOn = false;
	}
}