/***********************************************************************

projectile_ssm_qwta.script

***********************************************************************/

object projectile_ssm_qwta : projectile_ssm {
	void		DoExplodeEffect_ssm( entity collisionEnt );
	void		DoExplodeEffect( entity collisionEnt ) {
		DoExplodeEffect_ssm( collisionEnt );
	}

	void			preinit();

	float			empRadius;
	float			empTime;
	float			weaponEmpTime;
	
	float			entityDeclIndex;
	
	float			radiationIndex;
}

void projectile_ssm_qwta::preinit() {
	entityDeclIndex	= sys.getDeclType( "entityDef" );
	
	empRadius		= getFloatKey( "emp_radius" );
	empTime			= getFloatKey( "emp_time" );
	weaponEmpTime	= getFloatKey( "emp_weapon_time" );
	
	radiationIndex	= sys.getDeclIndex( entityDeclIndex, getKey( "def_radiation" ) );
}

void projectile_ssm_qwta::DoExplodeEffect_ssm( entity collisionEnt ) {
	float removeDelay;
	SetRadiusDamageIgnoreEntity( collisionEnt );

	DoRadiusDamage();

	entitiesOfCollection( "emp" );
	filterEntitiesByRadius( getWorldOrigin(), empRadius, true );
	filterEntitiesByAllegiance( TA_FLAG_ENEMY, 1 );

	entity owner = getOwner();

	float count = getBoundsCacheCount();
	float i;
	for ( i = 0; i < count; i++ ) {
		entity ent = getBoundsCacheEntity( i );
		ent.vApplyEmpDamage( owner, empTime, weaponEmpTime );
	}
	
	radiation_point radiationPoint = sys.spawnType( radiationIndex );
	radiationPoint.setWorldOrigin( getWorldOrigin() );
	radiationPoint.setAngles( g_vectorUp );
	radiationPoint.Activate( getOwner() );

	removeDelay = getFloatKeyWithDefault( "removedelay", 0.5 );
	ScheduleRemoval( removeDelay );
}
