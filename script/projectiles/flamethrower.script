
object projectile_flamethrower_napalm : projectile_grenade {
	
	void		preinit();
	void		OnStick( entity collisionEnt, vector collisionNormal, string surfaceType, string joint );
	void		OnPostThink();
	void		DoWaterExplosion( vector position, string surfaceType, vector normal );
	void		DoExplodeEffect( entity collisionEnt );
	
	float		OnCollide( object traceObject, vector velocity, float bodyId );
	
	handle		fxBurnHandle;
	
	boolean		forcefieldWeakBounce;
	
	float		damageRate;
	float		nextDamageTime;
}

void projectile_flamethrower_napalm::preinit() {
	fxBurnHandle = 0;
	nextDamageTime = 0.0;
	forcefieldWeakBounce = getIntKey( "forcefield_weakbounce" );
	damageRate = getFloatKey( "damageRate" );
}

void projectile_flamethrower_napalm::OnStick( entity collisionEnt, vector collisionNormal, string surfaceType, string joint ) {
	ProjectileMissile_OnStick( collisionEnt, collisionNormal, surfaceType, joint );
	
	if(!fxBurnHandle) {
		fxBurnHandle = playEffect( "fx_burn", "", 1 );
	}
}

void projectile_flamethrower_napalm::OnPostThink() {
	if ( isBound() ) {
		forceRunPhysics();
	}
	
	if ( isInWater() && !fxBurnHandle ) {
		fxBurnHandle = playEffect( "fx_burn", "", 1 );
	}
	
	if ( stuck || isInWater() ) {
		if( sys.getTime() > nextDamageTime ) {
			nextDamageTime = sys.getTime() + damageRate;
			DoRadiusDamage();
		}
	}
}

void projectile_flamethrower_napalm::DoWaterExplosion( vector position, string surfaceType, vector normal ) {
}

void projectile_flamethrower_napalm::DoExplodeEffect( entity collisionEnt ) {
	float removeDelay;

	removeDelay = getFloatKeyWithDefault( "removedelay", 0.5 );

	ScheduleRemoval( removeDelay );
}

// NOTE: If this returns true, all momentum on the object will be cleared, otherwise, it will bounce
float projectile_flamethrower_napalm::OnCollide( object traceObject, vector velocity, float bodyId ) {
	float shaderFlags;
	entity collisionEnt;
	vector dir;

	if( stuck ) {
		return 1.0f;
	}

	shaderFlags = traceObject.getTraceSurfaceFlags();
	if( shaderFlags & SURF_NOIMPACT ) {
		ScheduleRemoval( 0 );
		return 1.0f;
	}

	if ( PendingRemoval() ) {
		return 1.0f;
	}

	collisionEnt = traceObject.getTraceEntity();

	player collisionPlayer = collisionEnt;

	if ( stickOnContact && collisionPlayer == $null_entity ) {
		if ( shaderFlags & SURF_NOPLANT ) {
			if ( forcefieldWeakBounce ) {
				setLinearVelocity( velocity * 0.25 ); // Just fall to the ground, bouncing looks stupid.
			}
			return false;
		}
		
		if ( collisionEnt.vDisablePlantCharge() ) {
			return false;
		}
		
		OnStick( collisionEnt, traceObject.getTraceNormal(), traceObject.getTraceSurfaceType(), traceObject.getTraceJoint() );
		return 1.0f;
	}

	if ( ( armTime > 0 ) && ( ( getLaunchTime() + armTime ) > sys.getTime() ) ) {
		MissileBounce( velocity );
		return 0.0f;
	}

	if ( collisionPlayer != $null_entity ) {
		if( !detonateOnActor ) {
			return 0.f;
		}
	}

	if ( !detonateOnWorld ) {
	
		if ( nextBounceTime < sys.getTime() ) {
			string keyfx = getKey( "fx_bounce_"+traceObject.getTraceSurfaceType() );
			if ( keyfx != "" ) {
				sys.playWorldEffect( keyfx , '1 1 1', traceObject.getTraceEndPos(), traceObject.getTraceNormal() );
			}
			nextBounceTime = sys.getTime() + 1000;
		}

		MissileBounce( velocity );
		return 0.0f;
	}

	return CollideEffect( traceObject, collisionEnt, velocity );
}
